/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.tuvarna.geo.apis

import com.tuvarna.geo.infrastructure.ApiClient
import com.tuvarna.geo.infrastructure.ApiResponse
import com.tuvarna.geo.infrastructure.ClientError
import com.tuvarna.geo.infrastructure.ClientException
import com.tuvarna.geo.infrastructure.MultiValueMap
import com.tuvarna.geo.infrastructure.RequestConfig
import com.tuvarna.geo.infrastructure.RequestMethod
import com.tuvarna.geo.infrastructure.ResponseType
import com.tuvarna.geo.infrastructure.ServerError
import com.tuvarna.geo.infrastructure.ServerException
import com.tuvarna.geo.infrastructure.Success
import com.tuvarna.geo.model.UserDTO
import com.tuvarna.geo.models.RestApiResponseVoid
import okhttp3.HttpUrl
import okhttp3.OkHttpClient
import java.io.IOException

class RegisterControllerApi(
  basePath: kotlin.String = defaultBasePath,
  client: OkHttpClient = ApiClient.defaultClient,
) : ApiClient(basePath, client) {
  companion object {
    @JvmStatic
    val defaultBasePath: String by lazy {
      System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:8080")
    }
  }

  /**
   * Register a new user
   *
   * @param userDTO
   * @return RestApiResponseVoid
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   * @throws UnsupportedOperationException If the API returns an informational or redirection
   *   response
   * @throws ClientException If the API returns a client error response
   * @throws ServerException If the API returns a server error response
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(
    IllegalStateException::class,
    IOException::class,
    UnsupportedOperationException::class,
    ClientException::class,
    ServerException::class,
  )
  fun create(userDTO: com.tuvarna.geo.model.UserDTO): RestApiResponseVoid {
    val localVarResponse = createWithHttpInfo(userDTO = userDTO)

    return when (localVarResponse.responseType) {
      ResponseType.Success -> (localVarResponse as Success<*>).data as RestApiResponseVoid
      ResponseType.Informational ->
        throw UnsupportedOperationException("Client does not support Informational responses.")
      ResponseType.Redirection ->
        throw UnsupportedOperationException("Client does not support Redirection responses.")
      ResponseType.ClientError -> {
        val localVarError = localVarResponse as ClientError<*>
        throw ClientException(
          "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
          localVarError.statusCode,
          localVarResponse,
        )
      }
      ResponseType.ServerError -> {
        val localVarError = localVarResponse as ServerError<*>
        throw ServerException(
          "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
          localVarError.statusCode,
          localVarResponse,
        )
      }
    }
  }

  /**
   * Register a new user
   *
   * @param userDTO
   * @return ApiResponse<RestApiResponseVoid?>
   * @throws IllegalStateException If the request is not correctly configured
   * @throws IOException Rethrows the OkHttp execute method exception
   */
  @Suppress("UNCHECKED_CAST")
  @Throws(IllegalStateException::class, IOException::class)
  fun createWithHttpInfo(userDTO: UserDTO): ApiResponse<RestApiResponseVoid?> {
    val localVariableConfig = createRequestConfig(userDTO = userDTO)

    return request<UserDTO, RestApiResponseVoid>(localVariableConfig)
  }

  /**
   * To obtain the request config of the operation create
   *
   * @param userDTO
   * @return RequestConfig
   */
  fun createRequestConfig(userDTO: UserDTO): RequestConfig<UserDTO> {
    val localVariableBody = userDTO
    val localVariableQuery: MultiValueMap = mutableMapOf()
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders["Content-Type"] = "application/json"

    return RequestConfig(
      method = RequestMethod.POST,
      path = "/register",
      query = localVariableQuery,
      headers = localVariableHeaders,
      requiresAuthentication = false,
      body = localVariableBody,
    )
  }

  private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
    HttpUrl.Builder()
      .scheme("http")
      .host("localhost")
      .addPathSegment(uriComponent)
      .build()
      .encodedPathSegments[0]
}
